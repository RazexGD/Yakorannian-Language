// Загрузка данных и грамматических правил
let dictionaryData = null;
let grammarRules = null;

// Загрузка словаря
fetch('../data/yakorannian_words.json')
    .then(response => response.json())
    .then(data => {
        dictionaryData = data;
        initApp();
    })
    .catch(error => console.error('Ошибка загрузки словаря:', error));

// Загрузка грамматики (создайте grammar_rules.json)
fetch('../data/grammar_rules.json')
    .then(response => response.json())
    .then(rules => {
        grammarRules = rules;
        initApp();
    })
    .catch(error => console.error('Ошибка загрузки грамматики:', error));

// Инициализация приложения
let isInitialized = false;
function initApp() {
    if (!dictionaryData || !grammarRules || isInitialized) return;
    isInitialized = true;

    const searchInput = document.getElementById('search');
    const contextSelect = document.getElementById('context');
    const wordsContainer = document.getElementById('words-container');

    // Первоначальная загрузка
    updateDisplay();

    // Обработчики событий
    searchInput.addEventListener('input', updateDisplay);
    contextSelect.addEventListener('change', updateDisplay);
}

// Основная функция отображения
function updateDisplay() {
    if (!dictionaryData) return;

    const searchTerm = document.getElementById('search').value.toLowerCase();
    const context = {
        sentence_type: document.getElementById('context').value
    };

    const wordsContainer = document.getElementById('words-container');
    wordsContainer.innerHTML = '';

    dictionaryData.words.forEach(wordEntry => {
        // Применяем фильтры
        if (!matchesSearch(wordEntry, searchTerm)) return;

        // Применяем грамматические правила
        const displayedWord = applyGrammarRules(wordEntry, context);
        
        // Создаем карточку
        wordsContainer.innerHTML += createWordCard(displayedWord, wordEntry);
    });
}

// Поиск по словам и переводам
function matchesSearch(word, term) {
    if (!term) return true;
    return word.word.toLowerCase().includes(term) || 
           word.translations.ru.toLowerCase().includes(term);
}

// Создание HTML карточки
function createWordCard(wordForm, wordData) {
    return `
        <div class="word-card">
            <h3>${wordForm}</h3>
            <div class="details">
                <p class="translation">${formatTranslations(wordData.translations)}</p>
                ${wordData.pronunciation?.ipa ? 
                    `<p class="pronunciation">/${wordData.pronunciation.ipa}/</p>` : ''}
                ${wordData.pronunciation?.audio ? 
                    `<button class="audio-btn" onclick="playAudio('${wordData.pronunciation.audio}')">▶</button>` : ''}
            </div>
        </div>
    `;
}

// Форматирование переводов
function formatTranslations(translations) {
    return Object.entries(translations)
        .map(([lang, value]) => `${lang.toUpperCase()}: ${Array.isArray(value) ? value.join(', ') : value}`)
        .join(' • ');
}

// Грамматические правила
function applyGrammarRules(word, context) {
    if (!word.type) return word.word;

    try {
        switch(word.type) {
            case 'noun':
                return declineNoun(word, context);
            case 'verb':
                return conjugateVerb(word, context);
            default:
                return word.word;
        }
    } catch (e) {
        console.error(`Ошибка в слове ${word.word}:`, e);
        return word.word;
    }
}

// Склонение существительных
function declineNoun(word, context) {
    if (word.irregular?.[`${context.case}_${context.number}`]) {
        return word.irregular[`${context.case}_${context.number}`];
    }

    const declension = grammarRules.noun_declensions[word.declension];
    const ending = declension[context.case][context.number][word.gender];
    
    return (word.stem || word.word.slice(0, -1)) + ending;
}

// Спряжение глаголов
function conjugateVerb(word, context) {
    const conjugation = grammarRules.verb_conjugations[word.conjugation];
    const ending = conjugation[context.number][context.person];
    
    return (word.stem || getVerbStem(word)) + ending;
}

// Автоопределение основы глагола
function getVerbStem(word) {
    for (const [ending, cut] of Object.entries(grammarRules.verb_endings)) {
        if (word.word.endsWith(ending)) {
            return word.word.slice(0, -cut);
        }
    }
    return word.word;
}

// Воспроизведение аудио
function playAudio(audioPath) {
    try {
        const audio = new Audio(audioPath);
        audio.play().catch(e => console.error('Ошибка воспроизведения:', e));
    } catch (e) {
        console.error('Некорректный путь к аудио:', audioPath);
    }
}
