// Загрузка данных и грамматических правил
let dictionaryData = null;
let grammarRules = null;

// Загрузка словаря
fetch('../data/yakorannian_words.json')
    .then(response => response.json())
    .then(data => {
        dictionaryData = data;
        initApp();
    })
    .catch(error => console.error('Ошибка загрузки словаря:', error));

// Загрузка грамматики (создайте grammar_rules.json)
fetch('../data/grammar_rules.json')
    .then(response => response.json())
    .then(rules => {
        grammarRules = rules;
        initApp();
    })
    .catch(error => console.error('Ошибка загрузки грамматики:', error));

// Инициализация приложения
let isInitialized = false;
function initApp() {
    if (!dictionaryData || !grammarRules || isInitialized) return;
    isInitialized = true;

    const searchInput = document.getElementById('search');
    const contextSelect = document.getElementById('context');
    const wordsContainer = document.getElementById('words-container');

    // Первоначальная загрузка
    updateDisplay();

    // Обработчики событий
    searchInput.addEventListener('input', updateDisplay);
    contextSelect.addEventListener('change', updateDisplay);
}
function applyGrammarRules(word, context) {
  if (!word.type) return word.word;

  try {
    switch(word.type.toLowerCase()) {
      case 'noun': // Для существительных
        return declineNoun(
          word,
          context.case, // Падеж из контекста (nominative, genitive и т.д.)
          context.number, // Число (singular/plural)
          word.gender, // Род (masculine/feminine)
          context // Дополнительный контекст
        );

      case 'verb': // Для глаголов
        return conjugateVerb(
          word,
          context.tense, // Время (past, present, future)
          context.person, // Лицо (1st, 2nd, 3rd)
          context.number, // Число
          context.aspect // Вид (perfective/imperfective)
        );

      case 'adjective': // Для прилагательных
        return declineAdjective(
          word,
          context.case,
          context.number,
          context.gender,
          context.degree // Степень сравнения (positive, comparative)
        );

      case 'pronoun': // Для местоимений
        return declinePronoun(
          word,
          context.case,
          context.number,
          context.person
        );

      case 'numeral': // Для числительных
        return declineNumeral(
          word,
          context.case,
          context.number,
          context.form // Форма (cardinal, ordinal)
        );

      default: // Для неизменяемых частей речи
        return word.word;
    }
  } catch (e) {
    console.error(Грамматическая ошибка в слове "${word.word}":, e);
    return word.word; // Возвращаем базовую форму при ошибке
  }
}
// Глаголы
function conjugateVerb(word, tense, person, number, aspect) {
  const pattern = grammarRules.verb_conjugations[word.conjugation];
  const stem = word.stem || getVerbStem(word.word);
  return stem + pattern[tense][aspect][number][person];
}

// Прилагательные
function declineAdjective(word, caseName, number, gender, degree) {
  const declension = grammarRules.adjective_declensions[degree];
  return word.stem + declension[caseName][number][gender];
}

// Местоимения
function declinePronoun(word, caseName, number, person) {
  const paradigm = grammarRules.pronoun_paradigms[word.subtype];
  return paradigm[person][number][caseName];
}

// Числительные
function declineNumeral(word, caseName, number, form) {
  const rules = grammarRules.numeral_declensions[form];
  return word.stem + rules[caseName][number];
}

// Основная функция отображения
function updateDisplay() {
    if (!dictionaryData) return;

    const searchTerm = document.getElementById('search').value.toLowerCase();
    const context = {
        sentence_type: document.getElementById('context').value
    };

    const wordsContainer = document.getElementById('words-container');
    wordsContainer.innerHTML = '';

    dictionaryData.words.forEach(wordEntry => {
        // Применяем фильтры
        if (!matchesSearch(wordEntry, searchTerm)) return;

        // Применяем грамматические правила
        const displayedWord = applyGrammarRules(wordEntry, context);
        
        // Создаем карточку
        wordsContainer.innerHTML += createWordCard(displayedWord, wordEntry);
    });
}

// Поиск по словам и переводам
function matchesSearch(word, term) {
    if (!term) return true;
    return word.word.toLowerCase().includes(term) || 
           word.translations.ru.toLowerCase().includes(term);
}

// Создание HTML карточки
function createWordCard(wordForm, wordData) {
    return `
        <div class="word-card">
            <h3>${wordForm}</h3>
            <div class="details">
                <p class="translation">${formatTranslations(wordData.translations)}</p>
                ${wordData.pronunciation?.ipa ? 
                    `<p class="pronunciation">/${wordData.pronunciation.ipa}/</p>` : ''}
                ${wordData.pronunciation?.audio ? 
                    `<button class="audio-btn" onclick="playAudio('${wordData.pronunciation.audio}')">▶</button>` : ''}
            </div>
        </div>
    `;
}

// Форматирование переводов
function formatTranslations(translations) {
    return Object.entries(translations)
        .map(([lang, value]) => `${lang.toUpperCase()}: ${Array.isArray(value) ? value.join(', ') : value}`)
        .join(' • ');
}

// Грамматические правила
function applyGrammarRules(word, context) {
    if (!word.type) return word.word;

    try {
        switch(word.type) {
            case 'noun':
                return declineNoun(word, context);
            case 'verb':
                return conjugateVerb(word, context);
            default:
                return word.word;
        }
    } catch (e) {
        console.error(`Ошибка в слове ${word.word}:`, e);
        return word.word;
    }
}

// Склонение существительных
function declineNoun(word, context) {
    if (word.irregular?.[`${context.case}_${context.number}`]) {
        return word.irregular[`${context.case}_${context.number}`];
    }

    const declension = grammarRules.noun_declensions[word.declension];
    const ending = declension[context.case][context.number][word.gender];
    
    return (word.stem || word.word.slice(0, -1)) + ending;
}

// Спряжение глаголов
function conjugateVerb(word, context) {
    const conjugation = grammarRules.verb_conjugations[word.conjugation];
    const ending = conjugation[context.number][context.person];
    
    return (word.stem || getVerbStem(word)) + ending;
}

// Автоопределение основы глагола
function getVerbStem(word) {
    for (const [ending, cut] of Object.entries(grammarRules.verb_endings)) {
        if (word.word.endsWith(ending)) {
            return word.word.slice(0, -cut);
        }
    }
    return word.word;
}

// Воспроизведение аудио
function playAudio(audioPath) {
    try {
        const audio = new Audio(audioPath);
        audio.play().catch(e => console.error('Ошибка воспроизведения:', e));
    } catch (e) {
        console.error('Некорректный путь к аудио:', audioPath);
    }
}
function declineNoun(word, caseName, number, gender, context) {
  // Проверка исключений
  if (word.irregular?.[`${caseName}_${number}`]) {
    return word.irregular[`${caseName}_${number}`];
  }

  const declension = grammarRules.noun_declensions[caseName];
  const stem = word.stem || getNounStem(word.word, gender);
  
  // Особые правила для звательного падежа
  if (caseName === 'vocative') {
    return handleVocative(word.word, stem, number);
  }

  // Обработка разделительного падежа
  if (caseName === 'partitive') {
    return stem + grammarRules.noun_declensions.partitive.base_form[0];
  }

  // Общий алгоритм для остальных падежей
  const endings = declension[number][gender];
  const ending = getCorrectEnding(word.word, endings, gender);
  
  return stem + ending;
}

// Вспомогательные функции
function getNounStem(word, gender) {
  const endings = grammarRules.noun_declensions.nominative.singular[gender];
  for (const end of endings) {
    if (word.endsWith(end)) {
      return word.slice(0, -end.length);
    }
  }
  return word;
}

function handleVocative(word, stem, number) {
  if (number === 'plural') {
    if (word.endsWith('ця')) return stem.slice(0, -2) + 'іі';
    if (word.endsWith('ння')) return stem.slice(0, -3) + 'ьви';
    return stem + 'ұі';
  }
  
  const lastChar = word.slice(-1);
  const sibilants = ['ш', 'щ', 'ч', 'ж', 'ц'];
  return sibilants.includes(lastChar) 
    ? stem + 'о' 
    : stem + 'ұ';
}

function getCorrectEnding(word, endings, gender) {
  // Логика выбора окончания на основе последних букв слова
  const specialCases = {
    'а': ['а'],
    'я': ['я'],
    'о': ['о'],
    'е': ['е']
  };
  
  for (const [char, possibleEndings] of Object.entries(specialCases)) {
    if (endings.some(end => possibleEndings.includes(end))) {
      if (word.endsWith(char)) return endings[0];
    }
  }
  
  return endings[0];
}
